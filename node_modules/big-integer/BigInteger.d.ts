/**
 * Type definitions for BigInteger.js
 * Definitions by: Tommy Frazier <https://github.com/toefraz>
 */
export = bigInt;
export as namespace bigInt;

declare var bigInt: bigInt.BigIntegerStatic;

declare namespace bigInt {
    type BigNumber = number | bigint | string | BigInteger;

    interface BigIntegerStatic {
        /**
         * Equivalent to bigInt(0).
         */
        (): BigInteger;

        /**
         * Parse a Javascript number into a bigInt.
         */
        (number: number): BigInteger;

        /**
         * Parse a Javascript native bigint into a bigInt.
         */
        (number: bigint): BigInteger;

        /**
         * Parse a string into a bigInt.
         * Default base is 10.
         * Default alphabet is "0123456789abcdefghijklmnopqrstuvwxyz".
         * caseSensitive defaults to false.
         */
        (string: string, base?: BigNumber, alphabet?: string, caseSensitive?: boolean): BigInteger;

        /**
         * no-op.
         */
        (bigInt: BigInteger): BigInteger;

        /**
         * Constructs a bigInt from an array of digits in specified base.
         * The optional isNegative flag will make the number negative.
         */
        fromArray: (digits: BigNumber[], base?: BigNumber, isNegative?: boolean) => BigInteger;

        /**
         * Finds the greatest common denominator of a and b.
         */
        gcd: (a: BigNumber, b: BigNumber) => BigInteger;


        /**
         * Returns true if x is a BigInteger, false otherwise.
         */
        isInstance: (x: any) => x is BigInteger;

        /**
         * Finds the least common multiple of a and b.
         */
        lcm: (a: BigNumber, b: BigNumber) => BigInteger;

        /**
         * Returns the largest of a and b.
         */
        max: (a: BigNumber, b: BigNumber) => BigInteger;

        /**
         * Returns the smallest of a and b.
         */
        min: (a: BigNumber, b: BigNumber) => BigInteger;

        /**
         * Equivalent to bigInt(-1).
         */
        minusOne: BigInteger;

        /**
         * Equivalent to bigInt(1).
         */
        one: BigInteger;

        /**
         * Returns a random number between min and max.
         */
        randBetween: (min: BigNumber, max: BigNumber, rng?: () => number) => BigInteger;

        /**
         * Equivalent to bigInt(0).
         */
        zero: BigInteger;
    }

    interface BigInteger {
        /**
         * Returns the absolute value of a bigInt.
         */
        abs(): BigInteger;

        /**
         * Performs addition.
         */
        add(number: BigNumber): BigInteger;

        /**
         * Performs the bitwise AND operation.
         */
        and(number: BigNumber): BigInteger;

        /**
         * Returns the number of digits required to represent a bigInt in binary.
         */
        bitLength(): BigInteger;

        /**
         * Performs a comparison between two numbers. If the numbers are equal, it returns 0.
         * If the first number is greater, it returns 1. If the first number is lesser, it returns -1.
         */
        compare(number: BigNumber): number;

        /**
         * Performs a comparison between the absolute value of two numbers.
         */
        compareAbs(number: BigNumber): number;

        /**
         * Alias for the compare method.
         */
        compareTo(number: BigNumber): number;

        /**
         * Performs integer division, disregarding the remainder.
         */
        divide(number: BigNumber): BigInteger;

        /**
         * Performs division and returns an object with two properties: quotient and remainder.
         * The sign of the remainder will match the sign of the dividend.
         */
        divmod(number: BigNumber): { quotient: BigInteger, remainder: BigInteger };

        /**
         * Alias for the equals method.
         */
        eq(number: BigNumber): boolean;

        /**
         * Checks if two numbers are equal.
         */
        equals(number: BigNumber): boolean;

        /**
         * Alias for the greaterOrEquals method.
         */
        geq(number: BigNumber): boolean;

        /**
         * Checks if the first number is greater than the second.
         */
        greater(number: BigNumber): boolean;

        /**
         * Checks if the first number is greater than or equal to the second.
         */
        greaterOrEquals(number: BigNumber): boolean;

        /**
         * Alias for the greater method.
         */
        gt(number: BigNumber): boolean;

        /**
         * Returns true if the first number is divisible by the second number, false otherwise.
         */
        isDivisibleBy(number: BigNumber): boolean;

        /**
         * Returns true if the number is even, false otherwise.
         */
        isEven(): boolean;

        /**
         * Returns true if the number is negative, false otherwise.
         * Returns false for 0 and true for -0.
         */
        isNegative(): boolean;

        /**
         * Returns true if the number is odd, false otherwise.
         */
        isOdd(): boolean;

        /**
         * Return true if the number is positive, false otherwise.
         * Returns true for 0 and false for -0.
         */
        isPositive(): boolean;

        /**
         * Returns true if the number is prime, false otherwise.
         */
        isPrime(strict?: boolean): boolean;

        /**
         * Returns true if the number is very likely to be prime, false otherwise.
         */
        isProbablePrime(iterations?: number, rng?: () => number): boolean;

        /**
         * Returns true if the number is 1 or -1, false otherwise.
         */
        isUnit(): boolean;

        /**
         * Return true if the number is 0 or -0, false otherwise.
         */
        isZero(): boolean;

        /**
         * Alias for the lesserOrEquals method.
         */
        leq(number: BigNumber): boolean;

        /**
         * Checks if the first number is lesser than the second.
         */
        lesser(number: BigNumber): boolean;

        /**
         * Checks if the first number is less than or equal to the second.
         */
        lesserOrEquals(number: BigNumber): boolean;

        /**
         * Alias for the lesser method.
         */
        lt(number: BigNumber): boolean;

        /**
         * Alias for the subtract method.
         */
        minus(number: BigNumber): BigInteger;

        /**
         * Performs division and returns the remainder, disregarding the quotient.
         * The sign of the remainder will match the sign of the dividend.
         */
        mod(number: BigNumber): BigInteger;

        /**
         * Finds the multiplicative inverse of the number modulo mod.
         */
        modInv(number: BigNumber): BigInteger;

        /**
         * Takes the number to the power exp modulo mod.
         */
        modPow(exp: BigNumber, mod: BigNumber): BigInteger;

        /**
         * Performs multiplication.
         */
        multiply(number: BigNumber): BigInteger;

        /**
         * Reverses the sign of the number.
         */
        negate(): BigInteger;

        /**
         * Alias for the notEquals method.
         */
        neq(number: BigNumber): boolean;

        /**
         * Adds one to the number.
         */
        next(): BigInteger;

        /**
         * Performs the bitwise NOT operation.
         */
        not(): BigInteger;

        /**
         * Checks if two numbers are not equal.
         */
        notEquals(number: BigNumber): boolean;

        /**
         * Performs the bitwise OR operation.
         */
        or(number: BigNumber): BigInteger;

        /**
         * Alias for the divide method.
         */
        over(number: BigNumber): BigInteger;

        /**
         * Alias for the add method.
         */
        plus(number: BigNumber): BigInteger;

        /**
         * Performs exponentiation. If the exponent is less than 0, pow returns 0.
         * bigInt.zero.pow(0) returns 1.
         */
        pow(number: BigNumber): BigInteger;

        /**
         * Subtracts one from the number.
         */
        prev(): BigInteger;

        /**
         * Alias for the mod method.
         */
        remainder(number: BigNumber): BigInteger;

        /**
         * Shifts the number left by n places in its binary representation.
         * If a negative number is provided, it will shift right.
         *
         * Throws an error if number is outside of the range [-9007199254740992, 9007199254740992].
         */
        shiftLeft(number: BigNumber): BigInteger;

        /**
         * Shifts the number right by n places in its binary representation.
         * If a negative number is provided, it will shift left.
         *
         * Throws an error if number is outside of the range [-9007199254740992, 9007199254740992].
         */
        shiftRight(number: BigNumber): BigInteger;

        /**
         * Squares the number.
         */
        square(): BigInteger;

        /**
         * Performs subtraction.
         */
        subtract(number: BigNumber): BigInteger;

        /**
         * Alias for the multiply method.
         */
        times(number: BigNumber): BigInteger;

        /**
         *
         * Converts a bigInt to an object representing it as an array of integers module the given radix.
         */
        toArray(radix: number): BaseArray;

        /**
         * Converts a bigInt into a native Javascript number. Loses precision for numbers outside the range.
         */
        toJSNumber(): number;

        /**
         * Converts a bigInt to a string.
         */
        toString(radix?: number, alphabet?: string): string;

		/**
         * Converts a bigInt to a string. This method is called behind the scenes in JSON.stringify.
         */
        toJSON(): string;

        /**
         * Converts a bigInt to a native Javascript number. This override allows you to use native
         * arithmetic operators without explicit conversion.
         */
        valueOf(): number;

        /**
         * Performs the bitwise XOR operation.
         */
        xor(number: BigNumber): BigInteger;
    }

    // Array constant accessors
    interface BigIntegerStatic {
        '-999': BigInteger;
        '-998': BigInteger;
        '-997': BigInteger;
        '-996': BigInteger;
        '-995': BigInteger;
        '-994': BigInteger;
        '-993': BigInteger;
        '-992': BigInteger;
        '-991': BigInteger;
        '-990': BigInteger;
        '-989': BigInteger;
        '-988': BigInteger;
        '-987': BigInteger;
        '-986': BigInteger;
        '-985': BigInteger;
        '-984': BigInteger;
        '-983': BigInteger;
        '-982': BigInteger;
        '-981': BigInteger;
        '-980': BigInteger;
        '-979': BigInteger;
        '-978': BigInteger;
        '-977': BigInteger;
        '-976': BigInteger;
        '-975': BigInteger;
        '-974': BigInteger;
        '-973': BigInteger;
        '-972': BigInteger;
        '-971': BigInteger;
        '-970': BigInteger;
        '-969': BigInteger;
        '-968': BigInteger;
        '-967': BigInteger;
        '-966': BigInteger;
        '-965': BigInteger;
        '-964': BigInteger;
        '-963': BigInteger;
        '-962': BigInteger;
        '-961': BigInteger;
        '-960': BigInteger;
        '-959': BigInteger;
        '-958': BigInteger;
        '-957': BigInteger;
        '-956': BigInteger;
        '-955': BigInteger;
        '-954': BigInteger;
        '-953': BigInteger;
        '-952': BigInteger;
        '-951': BigInteger;
        '-950': BigInteger;
        '-949': BigInteger;
        '-948': BigInteger;
        '-947': BigInteger;
        '-946': BigInteger;
        '-945': BigInteger;
        '-944': BigInteger;
        '-943': BigInteger;
        '-942': BigInteger;
        '-941': BigInteger;
        '-940': BigInteger;
        '-939': BigInteger;
        '-938': BigInteger;
        '-937': BigInteger;
        '-936': BigInteger;
        '-935': BigInteger;
        '-934': BigInteger;
        '-933': BigInteger;
        '-932': BigInteger;
        '-931': BigInteger;
        '-930': BigInteger;
        '-929': BigInteger;
        '-928': BigInteger;
        '-927': BigInteger;
        '-926': BigInteger;
        '-925': BigInteger;
        '-924': BigInteger;
        '-923': BigInteger;
        '-922': BigInteger;
        '-921': BigInteger;
        '-920': BigInteger;
        '-919': BigInteger;
        '-918': BigInteger;
        '-917': BigInteger;
        '-916': BigInteger;
        '-915': BigInteger;
        '-914': BigInteger;
        '-913': BigInteger;
        '-912': BigInteger;
        '-911': BigInteger;
        '-910': BigInteger;
        '-909': BigInteger;
        '-908': BigInteger;
        '-907': BigInteger;
        '-906': BigInteger;
        '-905': BigInteger;
        '-904': BigInteger;
        '-903': BigInteger;
        '-902': BigInteger;
        '-901': BigInteger;
        '-900': BigInteger;
        '-899': BigInteger;
        '-898': BigInteger;
        '-897': BigInteger;
        '-896': BigInteger;
        '-895': BigInteger;
        '-894': BigInteger;
        '-893': BigInteger;
        '-892': BigInteger;
        '-891': BigInteger;
        '-890': BigInteger;
        '-889': BigInteger;
        '-888': BigInteger;
        '-887': BigInteger;
        '-886': BigInteger;
        '-885': BigInteger;
        '-884': BigInteger;
        '-883': BigInteger;
        '-882': BigInteger;
        '-881': BigInteger;
        '-880': BigInteger;
        '-879': BigInteger;
        '-878': BigInteger;
        '-877': BigInteger;
        '-876': BigInteger;
        '-875': BigInteger;
        '-874': BigInteger;
        '-873': BigInteger;
        '-872': BigInteger;
        '-871': BigInteger;
        '-870': BigInteger;
        '-869': BigInteger;
        '-868': BigInteger;
        '-867': BigInteger;
        '-866': BigInteger;
        '-865': BigInteger;
        '-864': BigInteger;
        '-863': BigInteger;
        '-862': BigInteger;
        '-861': BigInteger;
        '-860': BigInteger;
        '-859': BigInteger;
        '-858': BigInteger;
        '-857': BigInteger;
        '-856': BigInteger;
        '-855': BigInteger;
        '-854': BigInteger;
        '-853': BigInteger;
        '-852': BigInteger;
        '-851': BigInteger;
        '-850': BigInteger;
        '-849': BigInteger;
        '-848': BigInteger;
        '-847': BigInteger;
        '-846': BigInteger;
        '-845': BigInteger;
        '-844': BigInteger;
        '-843': BigInteger;
        '-842': BigInteger;
        '-841': BigInteger;
        '-840': BigInteger;
        '-839': BigInteger;
        '-838': BigInteger;
        '-837': BigInteger;
        '-836': BigInteger;
        '-835': BigInteger;
        '-834': BigInteger;
        '-833': BigInteger;
        '-832': BigInteger;
        '-831': BigInteger;
        '-830': BigInteger;
        '-829': BigInteger;
        '-828': BigInteger;
        '-827': BigInteger;
        '-826': BigInteger;
        '-825': BigInteger;
        '-824': BigInteger;
        '-823': BigInteger;
        '-822': BigInteger;
        '-821': BigInteger;
        '-820': BigInteger;
        '-819': BigInteger;
        '-818': BigInteger;
        '-817': BigInteger;
        '-816': BigInteger;
        '-815': BigInteger;
        '-814': BigInteger;
        '-813': BigInteger;
        '-812': BigInteger;
        '-811': BigInteger;
        '-810': BigInteger;
        '-809': BigInteger;
        '-808': BigInteger;
        '-807': BigInteger;
        '-806': BigInteger;
        '-805': BigInteger;
        '-804': BigInteger;
        '-803': BigInteger;
        '-802': BigInteger;
        '-801': BigInteger;
        '-800': BigInteger;
        '-799': BigInteger;
        '-798': BigInteger;
        '-797': BigInteger;
        '-796': BigInteger;
        '-795': BigInteger;
        '-794': BigInteger;
        '-793': BigInteger;
        '-792': BigInteger;
        '-791': BigInteger;
        '-790': BigInteger;
        '-789': BigInteger;
        '-788': BigInteger;
        '-787': BigInteger;
        '-786': BigInteger;
        '-785': BigInteger;
        '-784': BigInteger;
        '-783': BigInteger;
        '-782': BigInteger;
        '-781': BigInteger;
        '-780': BigInteger;
        '-779': BigInteger;
        '-778': BigInteger;
        '-777': BigInteger;
        '-776': BigInteger;
        '-775': BigInteger;
        '-774': BigInteger;
        '-773': BigInteger;
        '-772': BigInteger;
        '-771': BigInteger;
        '-770': BigInteger;
        '-769': BigInteger;
        '-768': BigInteger;
        '-767': BigInteger;
        '-766': BigInteger;
        '-765': BigInteger;
        '-764': BigInteger;
        '-763': BigInteger;
        '-762': BigInteger;
        '-761': BigInteger;
        '-760': BigInteger;
        '-759': BigInteger;
        '-758': BigInteger;
        '-757': BigInteger;
        '-756': BigInteger;
        '-755': BigInteger;
        '-754': BigInteger;
        '-753': BigInteger;
        '-752': BigInteger;
        '-751': BigInteger;
        '-750': BigInteger;
        '-749': BigInteger;
        '-748': BigInteger;
        '-747': BigInteger;
        '-746': BigInteger;
        '-745': BigInteger;
        '-744': BigInteger;
        '-743': BigInteger;
        '-742': BigInteger;
        '-741': BigInteger;
        '-740': BigInteger;
        '-739': BigInteger;
        '-738': BigInteger;
        '-737': BigInteger;
        '-736': BigInteger;
        '-735': BigInteger;
        '-734': BigInteger;
        '-733': BigInteger;
        '-732': BigInteger;
        '-731': BigInteger;
        '-730': BigInteger;
        '-729': BigInteger;
        '-728': BigInteger;
        '-727': BigInteger;
        '-726': BigInteger;
        '-725': BigInteger;
        '-724': BigInteger;
        '-723': BigInteger;
        '-722': BigInteger;
        '-721': BigInteger;
        '-720': BigInteger;
        '-719': BigInteger;
        '-718': BigInteger;
        '-717': BigInteger;
        '-716': BigInteger;
        '-715': BigInteger;
        '-714': BigInteger;
        '-713': BigInteger;
        '-712': BigInteger;
        '-711': BigInteger;
        '-710': BigInteger;
        '-709': BigInteger;
        '-708': BigInteger;
        '-707': BigInteger;
        '-706': BigInteger;
        '-705': BigInteger;
        '-704': BigInteger;
        '-703': BigInteger;
        '-702': BigInteger;
        '-701': BigInteger;
        '-700': BigInteger;
        '-699': BigInteger;
        '-698': BigInteger;
        '-697': BigInteger;
        '-696': BigInteger;
        '-695': BigInteger;
        '-694': BigInteger;
        '-693': BigInteger;
        '-692